<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- package이하에 있는 동일한 Interface로 등록된 모든 클래스를 찾아 자동으로 주입 -->
	<context:component-scan base-package="com.ktds.board" />
	<context:component-scan base-package="com.ktds.member" />

	<bean id="viewResolver"
		  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		  <property name="prefix" value="/WEB-INF/view/"></property>
		  <property name="suffix" value=".jsp" ></property>
	</bean>
	
	<!-- settings.properties 파일의 내용을 Bean Container에 적재시키기 -->
	<context:property-placeholder location="/WEB-INF/spring/settings.properties" />

	<!-- DBCP 설정 -->
	<!-- Connection 여러개 만들어서 모아두는 Pool -->
	<bean id="dataSource"
	      class="org.apache.commons.dbcp.BasicDataSource">
	      <property name="driverClassName" value="${jdbc.driver}" />
	      <property name="url" value="${jdbc.url}" />
	      <property name="username" value="${jdbc.id}" />
	      <property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- JDBCTemplate Bean 생성 -->
	<bean id="jdbc.Template"
	      class="org.springframework.jdbc.core.JdbcTemplate">
	      <property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="memberQueries"
		  class="java.util.ArrayList">
		  <constructor-arg name="c">
		  	<list>
		  		<!-- 0번 Index, Insert Member -->
	      		<value>
	      			INSERT INTO SPRING.MEMBERS (
	   							EMAIL
	   							, NAME
	   							, PASSWORD
   							)
					VALUES ( 
								 ?
								 , ?
								 , ?
						    )
	      		</value>
	      		<!-- 1번 Index, Select -->
	      		<value>
	      			SELECT	EMAIL
	      					, NAME
	      					, PASSWORD
					FROM	MEMBERS
					WHERE	EMAIL = ?
	      		</value>
	      		<!-- 2번 Index, Delete -->
	      		<value>
	      			DELETE
      				FROM	MEMBERS
      				WHERE	EMAIL = ?
	      		</value>
	      		<!-- 3번 Index, Select -->
	      		<value>
	      			SELECT	EMAIL
	      					, NAME
	      					, PASSWORD
					FROM	MEMBERS
	      		</value>
		  	</list>
		  </constructor-arg>
	</bean>
	
	<!-- BoardDaoImpl이 사용할 Query 작성 -->
	<bean id="boardQueries"
	      class="java.util.ArrayList">
	      <constructor-arg name="c">
	      	<list>
	      		<!-- 0번 Index, Insert -->
	      		<value>
					INSERT INTO SPRING.BOARD (
									   ID
									   , SUBJECT
									   , CONTENT
									   , EMAIL
									   , CRT_DT
									   , MDFY_DT
									   , FILE_NAME
									   , ORIGIN_FILE_NAME
									   ) 
					VALUES ( 
								       BOARD_ID_SEQ.NEXTVAL
									   , ?
									   , ?
									   , ?
									   , SYSDATE
									   , SYSDATE
									   , ?
									   , ?  
					 )
	      		</value>
	      		<!-- 1번 Index, Select -->
	      		<value>
	      			SELECT	ID            
							, SUBJECT         
							, CONTENT         
							, EMAIL           
							, CRT_DT          
							, MDFY_DT         
							, FILE_NAME       
							, ORIGIN_FILE_NAME
					FROM	BOARD
					WHERE	ID = ?
	      		</value>
	      		<!-- 2번 Index, Delete -->
	      		<value>
	      			DELETE
	      			FROM	BOARD
	      			WHERE	ID = ?
	      		</value>
	      		<!-- 3번 Index, Select -->
	      		<value>
	      			SELECT	ID            
							, SUBJECT         
							, CONTENT         
							, EMAIL           
							, CRT_DT          
							, MDFY_DT         
							, FILE_NAME       
							, ORIGIN_FILE_NAME
					FROM	BOARD
					ORDER	BY ID DESC
	      		</value>
	      	</list>
	      </constructor-arg>
	</bean>
	
	

	<!-- 
		BoardDaoImpl board.dao = new BoardDaoImpl();
		BoardServiceImpl board.service = new BoardServiceImpl();
		board.service.setBoardDao(board.Dao);
	 -->

	<!-- Spring에서 객체 한개는 Bean 여러개는 Beans -->
	<!-- BoardDaoImpl board.dao = new BoardDaoImpl(); -->
	<!-- id는 객체 이름, class는 class -->
	<!-- <bean id="board.dao"
		  class="com.ktds.board.dao.BoardDaoImpl"></bean> --> <!-- Red Line -> Ctrl + Space -->
		  
	<!-- BoardServiceImpl board.service = new BoardServiceImpl(); -->
    <!-- <bean id="board.service"
          class="com.ktds.board.service.BoardServiceImpl"> -->
       <!-- board.service.setBoardDao(board.Dao); -->
       <!-- name->Setter, ref->Parameter -->
          <!-- <property name="boardDao" ref="board.dao"></property> Reference Type
          <property name="" value=""></property> (String Type)
    </bean> -->
    
    <!-- BoardServiceImpl2 board.service2 = new BoardServiceImpl2(board.dao) -->
    <!-- <bean id="board.service2"
    	  class="com.ktds.board.service.BoardServiceImpl2">
    	  boardDao에 board.dao를 전달한다.
    	  <constructor-arg name="boardDao" ref="board.dao" /> 기본생성자
    </bean> -->
          
</beans>
