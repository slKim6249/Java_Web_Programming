<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- 공통기능 클래스 AOP에 사용됨. -->
	<bean	id="daoParamAop"
			class="com.ktds.common.aop.DaoParamAop">
	</bean>
	
	<aop:config>
		<aop:aspect id="daoAspect" ref="daoParamAop">
			<aop:pointcut expression="execution( * com.ktds..dao.*DaoImpl.*(..) )" 
						  id="daoPointCut" />
			<aop:around method="getParam" pointcut-ref="daoPointCut" />	
		</aop:aspect>
	</aop:config>

	<!-- com.ktds.board 패키지에 있는 @Component, Controller, Service, Repository 4가지 Annotation을 
		명시한 클래스들을 찾아서 Bean Container에 담아준다.  -->
	<context:component-scan base-package="com.ktds"></context:component-scan>

	<!-- Handler Mapping과 Handler Adapter를 만들어준다. -->
	<mvc:annotation-driven />
	
	<mvc:resources location="/WEB-INF/static/js/" mapping="/js/**" />
	<mvc:resources location="/WEB-INF/static/css/" mapping="/css/**" />
	<mvc:resources location="/WEB-INF/static/img/" mapping="/img/**" />
	
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/board/**" />
			<bean	id="sessionInterceptor"
					class="com.ktds.common.SessionInterceptor">
			</bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/member/**" />
			<mvc:exclude-mapping path="/member/logout"/>
			<bean	id="preventSessionInterceptor"
					class="com.ktds.common.PreventSessionInterceptor">
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<bean	id="localValidatorBean"
			class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
	</bean>
	
	<bean	id="viewResolver"
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<bean	id="multipartResolver"
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	<!-- 
	
		BoardDaoImpl board.dao = new BoardDaoImpl();
		BoardServiceImpl board.service = new BoardServiceImpl();
		boardService.setBoardDao(board.dao);
	
	 -->

	<!-- BoardDaoImpl board.dao = new BoardDaoImpl(); -->
	
	<!-- <bean	id="board.dao"
			class="com.ktds.board.dao.BoardDaoImpl"></bean> -->
			
	<!-- BoardServiceImpl board.service = new BoardServiceImpl(); -->
	<!-- bean는 객체, id는 객체의 이름, class는 객체의 타입 -->
	
	<!-- <bean	id="board.service"
			class="com.ktds.board.service.BoardServiceImpl"> -->
			
			<!-- board.service.setBoardDao(board.dao); -->
			<!-- ref는 Reference 타입이다. 즉, 파라미터이다. -->
			<!-- value는 String 타입이다. 숫자는 사용할 수 없다. -->
			<!-- property는 setter를 불러내는 역할을 한다. name는 setter의 이름이다. -->
			
			<!-- <property name="boardDao" ref="board.dao"></property> -->
			
			<!-- <property name="" value=""></property> -->
			
	<!-- </bean> -->
	
	<!-- BoardServiceImpl2 board.service2 = new BoardServiceImpl2(board.dao) -->
	
	<!-- <bean	id="board.service2"
			class="com.ktds.board.service.BoardServiceImpl2">
			name은 생성자 Argument의 이름을 의미한다.
			<constructor-arg name="boardDao" ref="board.dao"/>
	</bean> -->
	
</beans>
